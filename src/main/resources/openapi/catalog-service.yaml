openapi: 3.0.3
info:
  title: Catalog Service API
  version: 1.0.0
  description: REST API for managing products in MongoDB

servers:
  - url: http://localhost:8081
    description: Local development server

paths:
  /api/products:
    get:
      summary: List all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateDto'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /api/products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateDto'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          pattern: "^[a-zA-Z0-9\\s-_.]+$"
        price:
          type: number
          format: double
      required: [id, name, price]

    ProductCreateDto:
      type: object
      required: [ name, price, stock ]
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z0-9\\s-_.]+$"
          example: "Laptop"
        price:
          type: number
          format: double
          minimum: 0.01
          example: 999.99
        stock:
          type: integer
          minimum: 0
          example: 10

    ProductUpdateDto:
      type: object
      required: [ name, price ]
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z0-9\\s-_.]+$"
          example: "Laptop Pro"
        price:
          type: number
          format: double
          minimum: 0.01
          example: 1099.99

    ErrorResponse:
      type: object
      properties:
        status: { type: integer }
        error: { type: string }
        message: { type: string }
        path: { type: string }
        timestamp: { type: string, format: date-time }

    ValidationErrorResponse:
      type: object
      properties:
        status: { type: integer }
        error: { type: string }
        message: { type: string }
        path: { type: string }
        timestamp: { type: string, format: date-time }
        fields:
          type: object
          additionalProperties:
            type: string